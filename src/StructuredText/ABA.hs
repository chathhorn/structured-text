module StructuredText.ABA
      ( ABA (..)
      -- , acceptABA
      -- , formulaRun, acceptABAwithRun
      ) where

import Data.Set (Set)
import StructuredText.Boolean (B)

data ABA state alph = ABA
      { statesABA :: !(Set state)
      , alphaABA  :: !(Set alph)
      , currABA   :: !(B state)
      , finalABA  :: !(Set state)
      , deltaABA  :: state -> alph -> B state
      }

-- does the ABA aut accept the input word?
-- if boolean expression BTrue, accept; if BFalse; reject; else continue run
-- acceptABA :: (AtomicProp s, Ord s, Ord a) => ABA s a -> [a] -> Bool
-- acceptABA aut (a : as) = case next_state of
--      BTrue     -> True
--      BFalse    -> False
--      _         -> acceptABA aut {currABA = next_state} as
--      where next_state = simplify (deltaP (deltaABA aut) (currABA aut) a)
-- acceptABA aut [] = satisfied (currABA aut) (finalABA aut)

-- what is thesequence of B s expressions generated by running word through an ABA aut?
-- formulaRun :: (AtomicProp s, Ord s, Ord a) => ABA s a -> [a] -> [B s]
-- formulaRun aut word = case word of
--      (a : as) -> simplify(currABA aut): formulaRun aut{currABA = deltaP (deltaABA aut) (currABA aut) a} as
--      []       -> [simplify (currABA aut)]

-- is word accepted by automata? what is its formula-run?
-- uses formulaRun so entire run is generated
-- acceptABAwithRun :: (AtomicProp s, Ord s, Ord a) => ABA s a -> [a] -> (Bool, [B s])
-- acceptABAwithRun aut word = (satisfied (Data.List.last run) (finalABA aut), run)
--      where run = formulaRun aut word

